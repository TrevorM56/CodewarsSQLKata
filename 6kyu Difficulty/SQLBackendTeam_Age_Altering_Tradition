# DESCRIPTION:
# When a new member joins the backend team, we have a tradition. Instead of the usual monotonous introductions, we introduce ourselves in an alternating age order - the youngest goes first, followed by the oldest, then the second youngest, the second oldest, and so on. This rollercoaster of introductions creates a fun and friendly atmosphere, breaking the ice for the newcomer and making them feel at home from day one.

# We have employees with the the following columns:
#  employee_id: A unique integer identifier for each employee.
#  full_name: A string representing the employee's full name.
#  team: A string that specifies which team the employee is part of. The team can be one of the following four: "backend", "frontend", "devops", or "design".
#  birth_date: A date that represents the employee's birthdate.

# Your task is to write a SQL query that will retrieve all employees from the 'backend' team, sorted according to this tradition. That is, they should be ordered by age in a unique alternating pattern: youngest first, then oldest, then second youngest, then second oldest, and so forth.
# Your query should return a result set with columns: employee_id, full_name, team, birth_date, ordered as per the described pattern.
# Notes:
#  Let's assume for this task that there are no developers with the same birth_date - tests are written to ensure that no two employees have the same birth date.
# GLHF!

# Desired Output
# The desired output should look like this:
# employee_id	          full_name	   team	birth_date
#            4	 Claris Kertzmann	backend	2004-04-11
#            5	   Venetta West V	backend	1971-05-17
#            3	Tiara Breitenberg	backend	2002-02-16
#            6	      Ryan Harber	backend	1971-10-17

# MY SOLUTION
WITH rank AS (
  SELECT
    *,
    ROW_NUMBER() OVER (ORDER BY birth_date) AS x,
    COUNT(*) OVER () AS y
  FROM
    employees
  WHERE
    team = 'backend') 

SELECT
  employee_id,
  full_name,
  team,
  birth_date
FROM
  rank
ORDER BY
  LEAST(x, y-x+1), birth_date DESC;
