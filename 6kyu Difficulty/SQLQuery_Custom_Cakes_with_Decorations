# DESCRIPTION:
#  You are working with a database for a bakery that specializes in customized cakes. The cake names in the database follow a specific pattern: they begin with letters and end with digits (e.g., 'cake5', 'cake28'). Each cake is uniquely decorated with exactly one type of icing and a variety of sprinkles. 
#  The database tracks these decorations, and your task is to query it for specific cake information.

#  The database consists of the following tables:

# cakes: This table stores information about each cake:
#    cake: (varchar, primary key) - the unique name or identifier of the cake.
#    icing (varchar) - the type of icing used on the cake.

# reserved_sprinkles: This table maps cakes to their respective sprinkles. A cake may have zero, one, or multiple entries in this table:
#  cake (varchar) - the name of the cake, referencing the cakes table.
#  sprinkle: (varchar) - the type of sprinkle used, referencing the sprinkles table.

#  sprinkles: Contains details about different types of sprinkles.
#  sprinkle: (varchar, primary key) = the unique name or identifier of the sprinkle type.
#  consumed: (boolean) - indicates whether the sprinkle type is currently available (false for available, true for consumed).

# icings: Contains details about different types of icings.
#  icing: (varchar, primary key) - the unique name or identifier of the icing type.
#  consumed: (boolean) - indicates whether the icing type is currently available (false for available, true for consumed).

# We need cakes associated with exactly three different sprinkles. Write an SQL query that returns the names of cakes where neither the icing nor any of the three sprinkles are consumed. To be selected, a cake must meet the following criteria:
# The icing associated with the cake must not be consumed.
# All three sprinkles associated with the cake must not be consumed.
# The query should return a list of cake names meeting the criteria. The output column should be named cake. Additionally, the query should sort the cake names in a natural ascending order, where the alphabetical part is sorted alphabetically and the numerical part is sorted numerically (e.g., 'cake5' should come before 'cake28').
# GLHF!

## MY SOLUTION:
SELECT
  c.cake
FROM
  cakes AS c
JOIN
  reserved_sprinkles AS rs
    USING(cake)
JOIN
  sprinkles AS s
    USING(sprinkle)
JOIN
  icings AS i
    USING(icing)
GROUP BY
  c.cake 
HAVING
  COUNT(s.sprinkle) = 3
  AND EVERY(s.consumed = FALSE)
  AND EVERY(i.consumed = FALSE)
ORDER BY
  SUBSTRING(c.cake, '[A-Za-z]+'),
  SUBSTRING(c.cake, '[0-9]+$')::INT;
