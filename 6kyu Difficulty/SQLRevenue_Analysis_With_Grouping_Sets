# Your task is to write a query that retrieves the total revenue for each film category for each month of the year 2007, as well as the overall total revenue for each month (which is being displayed prior to data for each category). 
# The results should be ordered by month (in asc order) and revenue in descending order. Additionally, the query should display the total revenue for the year 2007 as the last row of the result set.
# To group the data and calculate the revenue totals, you can use the GROUP BY clause with the GROUPING SETS feature of PostgreSQL. This will allow you to group the data by different 
# combinations of columns, including the year only, the year and month, and the year, month, and category.

# Your query should produce a table with the following columns:
#  year: the year of the payment date
#  month: the month of the payment date - integer from 1 to 12
#  category: the name of the film category
#  revenue: the total revenue for the given combination of year, month, and category, or for the given year and month, or for a whole year

# Notes:
# for the sample tests, static dump of DVD Rental Sample Database is used, for the final solution - random tests.
# by revenue is simply meant sum of amount from payment table
# revenue should be rounded down to the previous whole number.
# if revenue for some categories is the same, then order by category name alphabeitcally
# Schema
# (not all columns - only part of the domain required to solve this kata)

# payment table:
   Column     |  Type     | Modifiers
--------------+-----------+-----------
 payment_id   | integer   | not null
 rental_id    | integer   | not null
 amount       | numeric   | not null
 payment_date | timestamp | not null

# film_category table:
# Column      | Type      | Modifiers
# ------------+---------- +----------
# film_id     | smallint  | not null
# category_id | smallint  | not null

# category table:
# Column      | Type      | Modifiers
# ------------+-----------+----------
# category_id | smallint  | not null
# name        | text      | not null

# rental table:
# Column       | Type      | Modifiers
# -------------+-----------+----------
# rental_id    | integer   | not null
# inventory_id | integer   | not null

# inventory table:
# Column       | Type      | Modifiers
# ------------ +-----------+----------
# inventory_id | integer   | not null
# film_id      | smallint  | not null

# Desired Output
# The desired output should look like this:
# Year    | month | category   | revenue    |
# --------+--------------------+------------|
#  2007   | 2      | <null>     | 9008      |   
#  2007   | 2      | Music      | 1023      |
#  2007   | 2      | Sci-Fi     | 814       |
# ...
#  2007   | 3      | <null>     | 8351      |   
#  2007   | 3      | Action     | 628       |
#  2007   | 3      | Sports     | 607       |
# ...
#  2007   | <null> | <null>     | 38005     |

# My Solution:
SELECT
  EXTRACT('year' FROM p.payment_date) :: INT AS year,
  EXTRACT('month' FROM p.payment_date) :: INT AS month,
  c.name AS category,
  FLOOR(SUM(p.amount)) :: INT AS revenue
FROM
  payment AS p
INNER JOIN rental AS r ON
  p.rental_id = r.rental_id
INNER JOIN inventory AS i ON
  r.inventory_id = i.inventory_id
INNER JOIN film_category AS fc ON
  i.film_id = fc.film_id
INNER JOIN category AS c ON
  fc.category_id = c.category_id
GROUP BY
  GROUPING SETS ( 
    (EXTRACT('year' FROM p.payment_date), EXTRACT('month' FROM p.payment_date)),
    (EXTRACT('year' FROM p.payment_date), EXTRACT('month' FROM p.payment_date), c.name),
    (EXTRACT('year' FROM p.payment_date)))
ORDER BY 
  month ASC, revenue DESC, category ASC;

# For this kata, I had to get the year and month (as int) from the payment_date column. To do this, I used the EXTRACT() method to pull the specified section from the payment_date.
# Next, I used the FLOOR() method with the SUM() of the amount to get the revenue rounded down, and used the :: operator to cast the result as an integer.
# For the table setup, I used GROUPING SETS method to generate the three requested GROUP BYs into a single statement.
